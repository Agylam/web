version: "3.9"
services:
  postgres:
    image: postgres:13.3
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${PGDATABASE}
      POSTGRES_USER: ${PGUSER}
      POSTGRES_PASSWORD: ${PGPASSWORD}
      POSTGRES_PORT: ${PGPORT}
      POSTGRES_DATA: ${PGDATA}
    ports:
      - "${PGPORT}:${PGPORT}"
    volumes:
      - ./dataDB2:/var/lib/postgresql/data
    user: root
    healthcheck:
      test: [ "CMD", "/usr/bin/pg_isready", "-U", "${PGUSER}" ]
      interval: 10s
      timeout: 1s
      retries: 3
      start_period: 30s
  backend:
    environment:
      BACKEND_PORT: ${BACKEND_PORT}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRESIN: ${JWT_EXPIRESIN}
      PGDATABASE: ${PGDATABASE}
      PGUSER: ${PGUSER}
      PGPASSWORD: ${PGPASSWORD}
      PGPORT: ${PGPORT}
      PGHOST: postgres
      WS_SERVER_PORT: ${WS_SERVER_PORT}
      CLOUD_VOICE_API_KEY: ${CLOUD_VOICE_API_KEY}
      S3_ENDPOINT: ${S3_ENDPOINT}
      S3_REGION: ${S3_REGION}
      S3_BUCKET: ${S3_BUCKET}
      S3_ACCESS_KEY_ID: ${S3_ACCESS_KEY_ID}
      S3_SECRET_ACCESS_KEY: ${S3_SECRET_ACCESS_KEY}

    volumes:
      - ./back/src:/app/src
      - ./back/temp:/app/temp
    ports:
      - "3000:3000"
    build:
      context: ./back
      dockerfile: ./docker/dev.Dockerfile
    depends_on:
      postgres:
        condition: service_healthy
  frontend:
    environment:
      BURL: "http://backend:${BACKEND_PORT}"
    ports:
      - "5173:5173"
    volumes:
      - ./front/src:/app/src
    build:
      context: ./front
      dockerfile: ./docker/dev.Dockerfile
    depends_on:
      - "backend"
    stdin_open: true
    tty: true
#    pgadmin:
#        image: dpage/pgadmin4
#        environment:
#            PGADMIN_DEFAULT_EMAIL: admin@admin.ru
#            PGADMIN_DEFAULT_PASSWORD: admin
#            POSTGRES_DB: ${PGDATABASE}
#            POSTGRES_USER: ${PGUSER}
#            POSTGRES_PASSWORD: ${PGPASSWORD}
#            POSTGRES_PORT: ${PGPORT}
#        ports:
#            - "8080:80"
#        depends_on:
#            - postgres
